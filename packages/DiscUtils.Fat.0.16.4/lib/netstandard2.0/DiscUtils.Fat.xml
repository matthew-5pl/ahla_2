<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DiscUtils.Fat</name>
    </assembly>
    <members>
        <member name="F:DiscUtils.Fat.ClusterReader._clusterSize">
            <summary>
            Pre-calculated value because of number of uses of this externally.
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.ClusterStream.WriteToCluster(System.UInt32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes up to the next cluster boundary, making sure to preserve existing data in the cluster
            that falls outside of the updated range.
            </summary>
            <param name="cluster">The cluster to write to.</param>
            <param name="pos">The file position of the write (within the cluster).</param>
            <param name="buffer">The buffer with the new data.</param>
            <param name="offset">Offset into buffer of the first byte to write.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <returns>The number of bytes written - either count, or the number that fit up to
            the cluster boundary.</returns>
        </member>
        <member name="M:DiscUtils.Fat.ClusterStream.ExtendChain">
            <summary>
            Adds a new cluster to the end of the existing chain, by allocating a free cluster.
            </summary>
            <returns>The cluster allocated.</returns>
            <remarks>This method does not initialize the data in the cluster, the caller should
            perform a write to ensure the cluster data is in known state.</remarks>
        </member>
        <member name="M:DiscUtils.Fat.Directory.#ctor(DiscUtils.Fat.Directory,System.Int64)">
            <summary>
            Initializes a new instance of the Directory class.  Use this constructor to represent non-root directories.
            </summary>
            <param name="parent">The parent directory.</param>
            <param name="parentId">The identity of the entry representing this directory in the parent.</param>
        </member>
        <member name="M:DiscUtils.Fat.Directory.#ctor(DiscUtils.Fat.FatFileSystem,System.IO.Stream)">
            <summary>
            Initializes a new instance of the Directory class.  Use this constructor to represent the root directory.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="dirStream">The stream containing the directory info.</param>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.EndOfChain">
            <summary>
            The End-of-chain marker to WRITE (SetNext).  Don't use this value to test for end of chain.
            </summary>
            <remarks>
            The actual end-of-chain marker bits on disk vary by FAT type, and can end ...F8 through ...FF.
            </remarks>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.BadCluster">
            <summary>
            The Bad-Cluster marker to WRITE (SetNext).  Don't use this value to test for bad clusters.
            </summary>
            <remarks>
            The actual bad-cluster marker bits on disk vary by FAT type.
            </remarks>
        </member>
        <member name="F:DiscUtils.Fat.FatBuffer.FreeCluster">
            <summary>
            The Free-Cluster marker to WRITE (SetNext).  Don't use this value to test for free clusters.
            </summary>
            <remarks>
            The actual free-cluster marker bits on disk vary by FAT type.
            </remarks>
        </member>
        <member name="T:DiscUtils.Fat.FatFileSystem">
            <summary>
            Class for accessing FAT file systems.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatFileSystem.Epoch">
            <summary>
            The Epoch for FAT file systems (1st Jan, 1980).
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <remarks>
            Local time is the effective timezone of the new instance.
            </remarks>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <remarks>
            Local time is the effective timezone of the new instance.
            </remarks>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.TimeConverter)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="timeConverter">A delegate to convert to/from the file system's timezone.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.TimeConverter)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <param name="timeConverter">A delegate to convert to/from the file system's timezone.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.#ctor(System.IO.Stream,DiscUtils.Streams.Ownership,DiscUtils.FileSystemParameters)">
            <summary>
            Initializes a new instance of the FatFileSystem class.
            </summary>
            <param name="data">The stream containing the file system.</param>
            <param name="ownsData">Indicates if the new instance should take ownership
            of <paramref name="data"/>.</param>
            <param name="parameters">The parameters for the file system.</param>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ActiveFat">
            <summary>
            Gets the active FAT (zero-based index).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BackupBootSector">
            <summary>
            Gets the Sector location of the backup boot sector (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BiosDriveNumber">
            <summary>
            Gets the BIOS drive number for BIOS Int 13h calls.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.BytesPerSector">
            <summary>
            Gets the number of bytes per sector (as stored in the file-system meta data).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.CanWrite">
            <summary>
            Indicates if this file system is read-only or read-write.
            </summary>
            <returns>.</returns>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ExtendedBootSignaturePresent">
            <summary>
            Gets a value indicating whether the VolumeId, VolumeLabel and FileSystemType fields are valid.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatCount">
            <summary>
            Gets the number of FATs present.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatOptions">
            <summary>
            Gets the FAT file system options, which can be modified.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatSize">
            <summary>
            Gets the size of a single FAT, in sectors.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FatVariant">
            <summary>
            Gets the FAT variant of the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FileSystemType">
            <summary>
            Gets the (informational only) file system type recorded in the meta-data.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FriendlyName">
            <summary>
            Gets the friendly name for the file system, including FAT variant.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.FSInfoSector">
            <summary>
            Gets the sector location of the FSINFO structure (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Heads">
            <summary>
            Gets the number of logical heads.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.HiddenSectors">
            <summary>
            Gets the number of hidden sectors, hiding partition tables, etc.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.MaxRootDirectoryEntries">
            <summary>
            Gets the maximum number of root directory entries (on FAT variants that have a limit).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Media">
            <summary>
            Gets the Media marker byte, which indicates fixed or removable media.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.MirrorFat">
            <summary>
            Gets a value indicating whether FAT changes are mirrored to all copies of the FAT.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.OemName">
            <summary>
            Gets the OEM name from the file system.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.ReservedSectorCount">
            <summary>
            Gets the number of reserved sectors at the start of the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.RootDirectoryCluster">
            <summary>
            Gets the cluster number of the first cluster of the root directory (FAT32 only).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.SectorsPerCluster">
            <summary>
            Gets the number of contiguous sectors that make up one cluster.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.SectorsPerTrack">
            <summary>
            Gets the number of sectors per logical track.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.TotalSectors">
            <summary>
            Gets the total number of sectors on the disk.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Version">
            <summary>
            Gets the file-system version (usually 0).
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.VolumeId">
            <summary>
            Gets the volume serial number.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.VolumeLabel">
            <summary>
            Gets the volume label.
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Detect(System.IO.Stream)">
            <summary>
            Detects if a stream contains a FAT file system.
            </summary>
            <param name="stream">The stream to inspect.</param>
            <returns><c>true</c> if the stream appears to be a FAT file system, else <c>false</c>.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file for reading and/or writing.
            </summary>
            <param name="path">The full path to the file.</param>
            <param name="mode">The file mode.</param>
            <param name="access">The desired access.</param>
            <returns>The stream to the opened file.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetAttributes(System.String)">
            <summary>
            Gets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to inspect.</param>
            <returns>The attributes of the file or directory.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes of a file or directory.
            </summary>
            <param name="path">The file or directory to change.</param>
            <param name="newValue">The new attributes of the file or directory.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetCreationTime(System.String)">
            <summary>
            Gets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The creation time.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastAccessTime(System.String)">
            <summary>
            Gets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The time the file or directory was last accessed.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastAccessTimeUtc(System.String)">
            <summary>
            Gets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The time the file or directory was last accessed.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last access time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Gets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The time the file or directory was last modified.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in local time) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetLastWriteTimeUtc(System.String)">
            <summary>
            Gets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <returns>The time the file or directory was last modified.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the last modification time (in UTC) of a file or directory.
            </summary>
            <param name="path">The path of the file or directory.</param>
            <param name="newTime">The new time to set.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The length in bytes.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing overwriting of an existing file.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="destinationFile">The destination file.</param>
            <param name="overwrite">Whether to permit over-writing of an existing file.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="path">The directory to create.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory, optionally with all descendants.
            </summary>
            <param name="path">The path of the directory to delete.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.DirectoryExists(System.String)">
            <summary>
            Indicates if a directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the directory exists.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FileExists(System.String)">
            <summary>
            Indicates if a file exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file exists.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Exists(System.String)">
            <summary>
            Indicates if a file or directory exists.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if the file or directory exists.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of directories.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of subdirectories in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of directories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFiles(System.String)">
            <summary>
            Gets the names of files in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of files in a specified directory matching a specified
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <param name="searchOption">Indicates whether to search subdirectories.</param>
            <returns>Array of files matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileSystemEntries(System.String)">
            <summary>
            Gets the names of all files and subdirectories in a specified directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Gets the names of files and subdirectories in a specified directory matching a specified
            search pattern.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against.</param>
            <returns>Array of files and subdirectories matching the search pattern.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a directory.
            </summary>
            <param name="sourceDirectoryName">The directory to move.</param>
            <param name="destinationDirectoryName">The target directory name.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file, allowing an existing file to be overwritten.
            </summary>
            <param name="sourceName">The file to move.</param>
            <param name="destinationName">The target file name.</param>
            <param name="overwrite">Whether to permit a destination file to be overwritten.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.Dispose(System.Boolean)">
            <summary>
            Disposes of this instance.
            </summary>
            <param name="disposing">The value <c>true</c> if Disposing.</param>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.WriteBPB(System.Byte[],System.UInt32,DiscUtils.Fat.FatType,System.UInt16,System.UInt32,System.UInt16,System.Byte,DiscUtils.Geometry,System.Boolean,System.UInt32,System.String)">
            <summary>
            Writes a FAT12/FAT16 BPB.
            </summary>
            <param name="bootSector">The buffer to fill.</param>
            <param name="sectors">The total capacity of the disk (in sectors).</param>
            <param name="fatType">The number of bits in each FAT entry.</param>
            <param name="maxRootEntries">The maximum number of root directory entries.</param>
            <param name="hiddenSectors">The number of hidden sectors before this file system (i.e. partition offset).</param>
            <param name="reservedSectors">The number of reserved sectors before the FAT.</param>
            <param name="sectorsPerCluster">The number of sectors per cluster.</param>
            <param name="diskGeometry">The geometry of the disk containing the Fat file system.</param>
            <param name="isFloppy">Indicates if the disk is a removable media (a floppy disk).</param>
            <param name="volId">The disk's volume Id.</param>
            <param name="label">The disk's label (or null).</param>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.Size">
            <summary>
            Size of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.UsedSpace">
            <summary>
            Used space of the Filesystem in bytes
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystem.AvailableSpace">
            <summary>
            Available space of the Filesystem in bytes
            </summary>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatFloppy(System.IO.Stream,DiscUtils.FloppyDiskType,System.String)">
            <summary>
            Creates a formatted floppy disk image in a stream.
            </summary>
            <param name="stream">The stream to write the blank image to.</param>
            <param name="type">The type of floppy to create.</param>
            <param name="label">The volume label for the floppy (or null).</param>
            <returns>An object that provides access to the newly created floppy disk image.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatPartition(DiscUtils.VirtualDisk,System.Int32,System.String)">
            <summary>
            Formats a virtual hard disk partition.
            </summary>
            <param name="disk">The disk containing the partition.</param>
            <param name="partitionIndex">The index of the partition on the disk.</param>
            <param name="label">The volume label for the partition (or null).</param>
            <returns>An object that provides access to the newly created partition file system.</returns>
        </member>
        <member name="M:DiscUtils.Fat.FatFileSystem.FormatPartition(System.IO.Stream,System.String,DiscUtils.Geometry,System.Int32,System.Int32,System.Int16)">
            <summary>
            Creates a formatted hard disk partition in a stream.
            </summary>
            <param name="stream">The stream to write the new file system to.</param>
            <param name="label">The volume label for the partition (or null).</param>
            <param name="diskGeometry">The geometry of the disk containing the partition.</param>
            <param name="firstSector">The starting sector number of this partition (hide's sectors in other partitions).</param>
            <param name="sectorCount">The number of sectors in this partition.</param>
            <param name="reservedSectors">The number of reserved sectors at the start of the partition.</param>
            <returns>An object that provides access to the newly created partition file system.</returns>
        </member>
        <member name="T:DiscUtils.Fat.FatFileSystemOptions">
            <summary>
            FAT file system options.
            </summary>
        </member>
        <member name="P:DiscUtils.Fat.FatFileSystemOptions.FileNameEncoding">
            <summary>
            Gets or sets the character encoding used for file names.
            </summary>
        </member>
        <member name="T:DiscUtils.Fat.FatType">
            <summary>
            Enumeration of known FAT types.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.None">
            <summary>
            Represents no known FAT type.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat12">
            <summary>
            Represents a 12-bit FAT.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat16">
            <summary>
            Represents a 16-bit FAT.
            </summary>
        </member>
        <member name="F:DiscUtils.Fat.FatType.Fat32">
            <summary>
            Represents a 32-bit FAT.
            </summary>
        </member>
    </members>
</doc>
